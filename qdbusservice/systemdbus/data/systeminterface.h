/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -v -c SystemInterface -p systeminterface.h:systeminterface.cpp com.kylin.assistant.qsystemdbus.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SYSTEMINTERFACE_H
#define SYSTEMINTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

//NOTICE:add by manual
#include "../customdata.h"
#include "../customdatalist.h"

/*
 * Proxy class for interface com.kylin.assistant.qsystemdbus
 */
class SystemInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.kylin.assistant.qsystemdbus"; }

public:
    SystemInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~SystemInterface();

    Q_PROPERTY(CustomDataList Customs READ customs)
    inline CustomDataList customs() const
    { return qvariant_cast< CustomDataList >(property("Customs")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> demoInfo()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("demoInfo"), argumentList);
    }

    inline QDBusPendingReply<> exitService()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("exitService"), argumentList);
    }

    inline QDBusPendingReply<CustomData> getCustomData()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getCustomData"), argumentList);
    }

    inline QDBusPendingReply<> sendCustomData(CustomData message)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(message);
        return asyncCallWithArgumentList(QStringLiteral("sendCustomData"), argumentList);
    }

    inline QDBusPendingReply<bool> userIsActive(const QString &user, bool active)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(user) << QVariant::fromValue(active);
        return asyncCallWithArgumentList(QStringLiteral("userIsActive"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void alertCustomData(CustomData message);
    void reportAlert(int ret, const QString &description);
};

namespace com {
  namespace kylin {
    namespace assistant {
      typedef ::SystemInterface qsystemdbus;
    }
  }
}
#endif
